# -*- coding: utf-8 -*-
"""
Created on Tue Aug  5 18:55:03 2025

@author: CsArOs
"""

import sys
import os
import shutil
import zipfile
import tkinter as tk
from tkinter import messagebox

if getattr(sys, 'frozen', False):
    script_dir = os.path.dirname(sys.executable)
else:
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
backup_zip = os.path.join(script_dir, "_HOTA BACKUP.zip")
hota_EXE = os.path.join(script_dir, "h3hota HD.exe")
hexswapper_EXE = os.path.join(script_dir, "HexSwapper.exe")
Icons = os.path.join(script_dir, "Icons")
Icons2 = os.path.join(script_dir, "Data", "Icons")
pp_INI = os.path.join(script_dir, "PP.ini")
pp_version_TXT = os.path.join(script_dir, "PP_version.txt")
readme = os.path.join(script_dir, "README Pumpkin Patch.txt")

hd_dll = "HD_HOTA.dll"

new_text = b"\x4F\x6E\x6C\x69\x6E\x65\x20\x6C\x6F\x62\x62\x79\x20\x69\x73\x20\x70\x61\x72\x74\x20\x6F\x66\x20\x74\x68\x65\x20\x48\x6F\x4D\x4D\x33\x20\x48\x44\x2B\x20\x70\x72\x6F\x6A\x65\x63\x74\x2E\x0A\x48\x6F\x74\x41\x20\x43\x72\x65\x77\x20\x68\x61\x73\x20\x7B\x6E\x6F\x74\x68\x69\x6E\x67\x7D\x20\x74\x6F\x20\x64\x6F\x20\x77\x69\x74\x68\x20\x74\x68\x65\x20\x64\x65\x76\x65\x6C\x6F\x70\x6D\x65\x6E\x74\x20\x61\x6E\x64\x20\x73\x75\x70\x70\x6F\x72\x74\x20\x6F\x66\x20\x6F\x6E\x6C\x69\x6E\x65\x20\x6C\x6F\x62\x62\x79\x2E\x0A\x0A\x7B\x50\x75\x6D\x70\x6B\x69\x6E\x7D\x20\x7B\x50\x61\x74\x63\x68\x7D\x20\x66\x75\x6E\x63\x74\x69\x6F\x6E\x73\x20\x77\x69\x74\x68\x20\x74\x68\x65\x20\x6F\x6E\x6C\x69\x6E\x65\x20\x6C\x6F\x62\x62\x79\x2C\x20\x62\x75\x74\x20\x79\x6F\x75\x20\x73\x68\x6F\x75\x6C\x64\x6E\x27\x74\x20\x70\x6C\x61\x79\x20\x72\x61\x6E\x6B\x65\x64\x20\x67\x61\x6D\x65\x73\x20\x77\x69\x74\x68\x20\x69\x74\x2E\x20\x57\x68\x65\x6E\x20\x69\x6E\x20\x64\x6F\x75\x62\x74\x2C\x20\x76\x69\x73\x69\x74\x20\x74\x68\x65\x20\x50\x50\x20\x44\x69\x73\x63\x6F\x72\x64\x20\x73\x65\x72\x76\x65\x72\x2E\x20\x0A\x0A"
original_text = b"\x4F\x6E\x6C\x69\x6E\x65\x20\x6C\x6F\x62\x62\x79\x20\x69\x73\x20\x70\x61\x72\x74\x20\x6F\x66\x20\x74\x68\x65\x20\x48\x6F\x4D\x4D\x33\x20\x48\x44\x2B\x20\x70\x72\x6F\x6A\x65\x63\x74\x2E\x0A\x48\x6F\x74\x41\x20\x43\x72\x65\x77\x20\x7B\x68\x61\x73\x7D\x20\x7B\x6E\x6F\x74\x68\x69\x6E\x67\x7D\x20\x7B\x74\x6F\x7D\x20\x7B\x64\x6F\x7D\x20\x77\x69\x74\x68\x20\x74\x68\x65\x20\x64\x65\x76\x65\x6C\x6F\x70\x6D\x65\x6E\x74\x20\x61\x6E\x64\x20\x73\x75\x70\x70\x6F\x72\x74\x20\x6F\x66\x20\x6F\x6E\x6C\x69\x6E\x65\x20\x6C\x6F\x62\x62\x79\x2E\x20\x49\x6E\x20\x63\x61\x73\x65\x20\x6F\x66\x20\x69\x73\x73\x75\x65\x73\x20\x77\x68\x65\x6E\x20\x61\x63\x63\x65\x73\x73\x69\x6E\x67\x20\x74\x68\x65\x20\x6C\x6F\x62\x62\x79\x2C\x20\x70\x6C\x65\x61\x73\x65\x20\x61\x62\x73\x74\x61\x69\x6E\x20\x66\x72\x6F\x6D\x20\x70\x6F\x73\x74\x69\x6E\x67\x20\x63\x6F\x6D\x70\x6C\x61\x69\x6E\x74\x73\x20\x6F\x6E\x20\x74\x68\x65\x20\x44\x69\x73\x63\x6F\x72\x64\x20\x63\x68\x61\x6E\x6E\x65\x6C\x20\x61\x6E\x64\x20\x6F\x6E\x20\x6F\x74\x68\x65\x72\x20\x70\x72\x6F\x6A\x65\x63\x74\x27\x73\x20\x70\x61\x67\x65\x73\x2E\x0A\x0A\x48\x6F\x74\x41\x20\x69\x73\x20\x61\x20\x6E\x6F\x6E\x2D\x70\x72\x6F\x66\x69\x74\x20\x70\x72\x6F\x6A\x65\x63\x74\x2C\x20\x61\x6E\x64\x20\x74\x68\x65\x20\x48\x6F\x74\x41\x20\x43\x72\x65\x77\x20\x68\x61\x73\x20\x6E\x65\x76\x65\x72\x20\x6F\x6E\x63\x65\x20\x61\x63\x63\x65\x70\x74\x65\x64\x20\x64\x6F\x6E\x61\x74\x69\x6F\x6E\x73\x20\x6F\x76\x65\x72\x20\x31\x36\x20\x79\x65\x61\x72\x73\x20\x6F\x66\x20\x64\x65\x76\x65\x6C\x6F\x70\x6D\x65\x6E\x74\x2E\x20\x42\x79\x20\x73\x75\x70\x70\x6F\x72\x74\x69\x6E\x67\x20\x74\x68\x65\x20\x6C\x6F\x62\x62\x79\x20\x79\x6F\x75\x20\x73\x75\x70\x70\x6F\x72\x74\x20\x74\x68\x65\x20\x63\x72\x65\x61\x74\x6F\x72\x20\x6F\x66\x20\x48\x6F\x4D\x4D\x33\x20\x48\x44\x2B\x2C\x20\x6E\x6F\x74\x20\x74\x68\x65\x20\x48\x6F\x74\x41\x20\x70\x72\x6F\x6A\x65\x63\x74\x2E"

def swaphex(file, offset, bytes, description, filepath = None):
    if filepath == None:
        global script_dir
        path = os.path.join(script_dir, file)
    else:
        path = filepath
    if not os.path.isfile(path):
        print(f"File not found: {path}")
        return
    for _ in range(3):
        try:
            with open(path, "r+b") as f:
                f.seek(offset)
                f.write(bytes)
                f.flush()
                f.seek(offset)
                written = f.read(len(bytes))
                if written != bytes:
                    raise IOError("Verification failed")
            print("%s patched at 0x%X", description, offset) 
            return
        except PermissionError:
            print("Permission error")
        except IOError as e:
            print("IOError while verifying %s: %s", description, e)

    print("Failed to patch %s at offset 0x%X", path, offset)
    print("Expected bytes: %s, got: %s", bytes, written)

def find_hex(file, hex_to_find, filepath = None):
    offsets = []
    if filepath == None:
        global script_dir
        path = os.path.join(script_dir, file)
    else:
        path = filepath

    offsets = find_hex(hd_dll, new_text)
    if not offsets:
        print("Could not find hex offset in DLL.")
        return

    with open(path, 'rb') as f:
        data = f.read()
        index = data.find(hex_to_find)
        while index != -1:
            offsets.append(index)
            index = data.find(hex_to_find, index + 1)

    return offsets

def main():
    root = tk.Tk()
    root.withdraw()  # Hide the root window

    confirmation = messagebox.askokcancel("Uninstalling Pumpkin Patch", "Are you sure you want to uninstall the Pumpkin Patch?")
    if not confirmation:
        return
    
    if not os.path.isfile(hota_EXE):
        messagebox.showerror("Uninstaller run in incorrect folder. Please run the uninstaller in a folder containing the Pumpkin Patch.")
        return
    if not os.path.isfile(backup_zip):
        messagebox.showerror('BACKUP folder not found.')
        return
    with zipfile.ZipFile(backup_zip, 'r') as backup:
        backup.extractall(script_dir)
        for file in backup.namelist():
            print(f"Restored: {file}")

    text_offset = find_hex(hd_dll, new_text)[0]
    if not text_offset:
        print("Could not find hex offset in DLL.")
    path = os.path.join(script_dir, hd_dll)
    if os.path.isfile(path):
       swaphex(hd_dll, text_offset, original_text, description = "lobby desc.")

    if os.path.exists(hexswapper_EXE):
        os.remove(hexswapper_EXE)
        
    if os.path.exists(Icons):
        shutil.rmtree(Icons)

    if os.path.exists(Icons2):
        shutil.rmtree(Icons2)

    messagebox.showinfo(f"Backup restored into: {script_dir}")


if __name__ == "__main__":
    main()















